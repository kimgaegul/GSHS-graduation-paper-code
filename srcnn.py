# -*- coding: utf-8 -*-
"""SRCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgKhyB7nkdogPkOXhCsLNcV_IsVUVuZJ
"""

from google.colab import drive
drive.mount('/content/drive')

"""##실행"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.optimizers import Adam
import os
import cv2
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from IPython.display import clear_output


from keras.layers import Input, Conv2D, MaxPooling2D
from keras.layers import Dense,Flatten
from keras.models import Model , Sequential

train, valid = tfds.load(
	"div2k/bicubic_x4",
    split = ["train", "validation"],
    as_supervised=True
    )

for i, (lr, orig) in enumerate(valid):
	if i ==16: break
        
print(orig.shape)
    

hr, lr = np.array(orig), np.array(lr)
bicubic_hr = cv2.resize(lr,dsize=(orig.shape[1], orig.shape[0])) 

print(bicubic_hr.shape)

plt.figure(figsize=(20,10))
left_figure= plt.subplot(1,2,1)
left_figure.imshow(bicubic_hr)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=20)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=20)
right_figure.imshow(hr)
right_figure.axis("off")

def img_crop(image, left_top, x=200, y=200):
	return image[left_top[0]:(left_top[0]+x), left_top[1]:(left_top[1]+y)]

crop_bicubic_hr = img_crop(bicubic_hr, (600,1100))
crop_hr = img_crop(hr, (600,1100))


plt.figure(figsize=(15,25))
left_figure = plt.subplot(1,2,1)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=20)
left_figure.imshow(crop_bicubic_hr)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=20)
right_figure.axis("off")
right_figure.imshow(crop_hr)

"""#model 실행"""

import tensorflow as tf

def preprocessing(lr, hr):
    hr = tf.image.random_crop(hr, size=[512, 512, 3])
    hr = tf.cast(hr, tf.float32) / 255.
    lr = tf.image.resize(hr, [512//4, 512//4], "bicubic")
    lr = tf.image.resize(lr, [512, 512], "bicubic")
    return lr, hr
    
train = train.map(preprocessing).shuffle(buffer_size=10).batch(16)
valid = valid.map(preprocessing).batch(16)

from tensorflow.keras import layers, Sequential

srcnn = Sequential()
input_shape = (None, None, 3)


srcnn.add(layers.Conv2D(128,9,padding="same", input_shape=(None, None, 3), activation = 'relu'))
srcnn.add(layers.Conv2D(64, 5, padding="same", activation = 'relu'))

srcnn.add(layers.Conv2D(3, 5, padding="same"))
'''
srcnn.add(Conv2D(128, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
#MAXPOOL1
#srcnn.add(MaxPooling2D(pool_size=(2,2),strides=2))

#conv2-1,2-2
srcnn.add(Conv2D(64, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
srcnn.add(Conv2D(64, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))

#MAXPOOL2
#srcnn.add(MaxPooling2D(pool_size=(2,2),strides=2))

#conv 3-1,3-2, 3-3
srcnn.add(Conv2D(32, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
srcnn.add(Conv2D(32, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
srcnn.add(Conv2D(32, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
#MAXPOOL3
#srcnn.add(MaxPooling2D(pool_size=(2,2),strides=2))

#conv4-1,4-2,4-3
srcnn.add(Conv2D(16, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
srcnn.add(Conv2D(16, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
srcnn.add(Conv2D(16, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))

#MAXPOOL4
#srcnn.add(MaxPooling2D(pool_size=(2,2),strides=2))

#conv5-1,5-2,5-3
srcnn.add(Conv2D(3, 3, strides=1, padding="same",activation="relu",input_shape=input_shape))
'''




srcnn.summary()

from keras.callbacks import Callback
class PlotLearning(Callback):
    def on_train_begin(self, logs={}):
        self.i = 0
        self.x = []
        self.losses = []
        self.val_losses = []
        self.psnr = []
        self.val_psnr = []
        self.ssim = []
        self.val_ssim = []
        self.fig = plt.figure()
        
        self.logs = []
        

    def on_epoch_end(self, epoch, logs={}):
        
        self.logs.append(logs)
        self.x.append(self.i)
        self.losses.append(logs.get('loss'))
        self.val_losses.append(logs.get('val_loss'))
        self.psnr.append(logs.get('PSNR'))
        self.val_psnr.append(logs.get('val_PSNR'))
        self.ssim.append(logs.get('ssim'))
        self.val_ssim.append(logs.get('val_ssim'))
        self.i += 1
        f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharex=True)
        
        clear_output(wait=True)
        
        ax1.set_yscale('Log')
        ax1.plot(self.x, self.losses, label="loss")
        ax1.plot(self.x, self.val_losses, label="val_loss")
        ax1.legend()
        
        ax2.plot(self.x, self.psnr, label="PSNR")
        ax2.plot(self.x, self.val_psnr, label="val_PSNR")
        ax2.legend()
        
        ax3.plot(self.x, self.ssim, label="SSIM")
        ax3.plot(self.x, self.val_ssim, label="val_SSIM")
        ax3.legend()

        plt.show()
        
        
plot = PlotLearning()

from tensorflow.python.keras import backend as lalala
from tensorflow.image import ssim
def PSNR(y_true, y_pred):
    return tf.image.psnr(y_true, y_pred, max_val=1.0)

    
def ssim(y_true, y_pred):
    return tf.image.ssim(y_true, y_pred, max_val=1.0)

from tensorflow.keras.utils import plot_model
model_img_file = '/content/drive/MyDrive/SRCNN_model.png'
plot_model(srcnn, to_file=model_img_file, 
                          show_shapes=False, 
                          show_layer_activations=True, 
                          show_dtype=True,
                          show_layer_names=True, rankdir="LR")

srcnn.compile(loss='mse', optimizer=Adam(learning_rate = 0.0005), metrics = [PSNR, ssim])

model_history = srcnn.fit(train
          , batch_size=32
          , epochs=100
          ,  validation_data=valid, callbacks = [plot])

srcnn.save("/content/drive/MyDrive/srcnn_100.h5")

print(max(model_history.history['PSNR']))
print(max(model_history.history['ssim']))

plt.plot(model_history.history['PSNR'])
plt.ylabel('PSNR')
plt.xlabel('epoch')
plt.title('SRCNN - PSNR Graph')
plt.savefig('/content/drive/MyDrive/SRCNN-PSNR_Graph.png')
plt.show()

plt.plot(model_history.history['ssim'])

plt.title('SRCNN- SSIM Graph')
plt.xlabel('epoch')
plt.ylabel('SSIM')
plt.savefig('/content/drive/MyDrive/SRCNN-SSIM_Graph.png')
plt.show()