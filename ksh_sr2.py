# -*- coding: utf-8 -*-
"""KSH-SR2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1puhFczItMlN6HXbhXLYQFynPC7e8i77C
"""

from google.colab import drive
drive.mount('/content/drive')

"""#시작"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.optimizers import Adam
import os
import cv2
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from IPython.display import clear_output


from keras.layers import Input, Conv2D, MaxPooling2D
from keras.layers import Dense,Flatten
from keras.models import Model , Sequential 

import keras
from keras import backend as K
from keras.models import Sequential, Model
from keras.layers import Dense, Activation
from keras.layers import Conv2D, MaxPooling2D, Input, ZeroPadding2D, merge, add
import tensorflow as tf
from keras.models import load_model
from keras import optimizers
from keras import losses
from tensorflow.keras.optimizers import SGD, Adam
from keras.callbacks import ModelCheckpoint

import os, glob, sys, threading
import scipy.io
from scipy import ndimage, misc
import numpy as np
import re

train, valid = tfds.load(
	"div2k/bicubic_x4",
    split = ["train", "validation"],
    as_supervised=True
    )

train_wonbon = train
valid_wonbon = valid

for i, (lr, orig) in enumerate(valid):
	if i == 16: break
        
print(orig.shape)
    

hr, lr = np.array(orig), np.array(lr)
bicubic_hr = cv2.resize(lr,dsize=(orig.shape[1], orig.shape[0])) 

print(bicubic_hr.shape)

plt.figure(figsize=(20,10))
left_figure= plt.subplot(1,2,1)
left_figure.imshow(bicubic_hr)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=20)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=20)
right_figure.imshow(hr)
right_figure.axis("off")

def img_crop(image, left_top, x=200, y=200):
	return image[left_top[0]:(left_top[0]+x), left_top[1]:(left_top[1]+y)]

crop_bicubic_hr = img_crop(bicubic_hr, (300,1200))
crop_hr = img_crop(hr, (300,1200))


plt.figure(figsize=(15,25))
left_figure = plt.subplot(1,2,1)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=20)
left_figure.imshow(crop_bicubic_hr)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=20)
right_figure.axis("off")
right_figure.imshow(crop_hr)

def preprocessing(lr, hr):
    hr = tf.image.random_crop(hr, size=[512, 512, 3])
    hr = tf.cast(hr, tf.float32) / 255.
        
    lr = tf.image.resize(hr, [512//4, 512//4], "bicubic")
    lr = tf.image.resize(lr, [512, 512], "bicubic")
    lr = tf.cast(lr, tf.float32)
    return lr, hr

import tensorflow as tf
    
train = train_wonbon.map(preprocessing).shuffle(buffer_size=10).batch(16)
valid = valid_wonbon.map(preprocessing).batch(16)

from tensorflow.python.keras import backend as lalala
from tensorflow.image import ssim
def PSNR(y_true, y_pred):
    return tf.image.psnr(y_true, y_pred, max_val=1.0)
    
def ssim(y_true, y_pred):
    return tf.image.ssim(y_true, y_pred, max_val=1.0)

print(float(-PSNR(hr, bicubic_hr)))
print(float(ssim(hr, bicubic_hr)))

"""#model 변경"""

IMG_SIZE = [None, None, 3]
input_img = Input(shape=IMG_SIZE)

model = Conv2D(64, (9, 9), padding='same', kernel_initializer='he_normal', activation = 'relu')(input_img)
model1 = Conv2D(48, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model)
model2 = Conv2D(48, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model)
model3 = Conv2D(48, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model)

model1 = Conv2D(32, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model1)
model2 = Conv2D(32, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model2)
model3 = Conv2D(32, (5, 5), padding='same', kernel_initializer='he_normal', activation = 'relu')(model3)

model1 = Conv2D(16, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model1)
model2 = Conv2D(16, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model2)
model3 = Conv2D(16, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model3)

model11 = add([model1, model2, model3])
model22 = add([model1, model2, model3])
model33 = add([model1, model2, model3])

model1 = Conv2D(8, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model11)
model2 = Conv2D(8, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model22)
model3 = Conv2D(8, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model33)

model1 = Conv2D(3, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model1)
model2 = Conv2D(3, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model2)
model3 = Conv2D(3, (3, 3), padding='same', kernel_initializer='he_normal', activation = 'relu')(model3)

model = add([model1, model2, model3])
res_img = model

output_img = add([res_img, input_img])

model = Model(input_img, output_img)

model.summary()

from tensorflow.keras.utils import plot_model
model_img_file = '/content/drive/MyDrive/KSH_model2.png'
plot_model(model, to_file=model_img_file, 
                          show_shapes=False, 
                          show_layer_activations=True, 
                          show_dtype=True,
                          show_layer_names=True)

model.compile(loss='mse', optimizer=Adam(learning_rate = 0.0005), metrics = [PSNR, ssim])

"""#모델 훈련"""

from keras.callbacks import Callback
class PlotLearning(Callback):
    def on_train_begin(self, logs={}):
        self.i = 0
        self.x = []
        self.losses = []
        self.val_losses = []
        self.psnr = []
        self.val_psnr = []
        self.ssim = []
        self.val_ssim = []
        self.fig = plt.figure()
        
        self.logs = []
        

    def on_epoch_end(self, epoch, logs={}):
        
        self.logs.append(logs)
        self.x.append(self.i)
        self.losses.append(logs.get('loss'))
        self.val_losses.append(logs.get('val_loss'))
        self.psnr.append(logs.get('PSNR'))
        self.val_psnr.append(logs.get('val_PSNR'))
        self.ssim.append(logs.get('ssim'))
        self.val_ssim.append(logs.get('val_ssim'))
        self.i += 1
        f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharex=True)
        
        clear_output(wait=True)
        
        ax1.set_yscale('Log')
        ax1.plot(self.x, self.losses, label="loss")
        ax1.plot(self.x, self.val_losses, label="val_loss")
        ax1.legend()
        
        ax2.plot(self.x, self.psnr, label="PSNR")
        ax2.plot(self.x, self.val_psnr, label="val_PSNR")
        ax2.legend()
        
        ax3.plot(self.x, self.ssim, label="SSIM")
        ax3.plot(self.x, self.val_ssim, label="val_SSIM")
        ax3.legend()

        plt.show()
        
        
plot = PlotLearning()

model_history = model.fit(train
          , batch_size=32
          , epochs=50
          ,  validation_data=valid,  callbacks=[plot])

model.save("/content/drive/MyDrive/KSHSR2_50.h5")

print(max(model_history.history['PSNR']))
print(max(model_history.history['ssim']))
print(float(model_history.history['ssim'][-1]))

plt.plot(model_history.history['PSNR'])
plt.ylabel('PSNR')
plt.xlabel('epoch')
plt.title('KSHSR2_model - PSNR Graph')
plt.savefig('/content/drive/MyDrive/KSHSR2_model-PSNR_Graph.png')
plt.show()

plt.plot(model_history.history['ssim'])

plt.title('KSHSR2_model- SSIM Graph')
plt.xlabel('epoch')
plt.ylabel('SSIM')
plt.savefig('/content/drive/MyDrive/KSHSR2_model-SSIM_Graph.png')
plt.show()