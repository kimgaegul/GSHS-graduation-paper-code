# -*- coding: utf-8 -*-
"""모델평가.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10MMkNF0qzrZGFmoda7alyBV9Tjc4Rof7
"""

from google.colab import drive
drive.mount('/content/drive')

"""### 실행"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.optimizers import Adam
import os
import cv2
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from IPython.display import clear_output


from keras.layers import Input, Conv2D, MaxPooling2D
from keras.layers import Dense,Flatten

from PIL import Image
from keras.models import Model , Sequential

orig = Image.open("/content/drive/MyDrive/model/road.jpg")
hr = np.array(orig)
lr = cv2.resize(hr,dsize=(hr.shape[1]//4, hr.shape[0]//4)) 
bicubic_hr = cv2.resize(lr,dsize=(hr.shape[1], hr.shape[0]), interpolation=cv2.INTER_CUBIC) 
print(bicubic_hr.shape)
plt.figure(figsize=(20,10))
left_figure= plt.subplot(1,2,1)
left_figure.imshow(bicubic_hr)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=20)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=20)
right_figure.imshow(hr)
right_figure.axis("off")

def img_crop(image, left_top, x=200, y=200):
	return image[left_top[0]:(left_top[0]+x), left_top[1]:(left_top[1]+y)]

crop_bicubic_hr = img_crop(bicubic_hr, (30,30))
crop_hr = img_crop(hr, (30,30)) 

# 잘라낸 부분을 시각화합니다.
plt.figure(figsize=(20,10))
left_figure = plt.subplot(1,2,1)
left_figure.axis("off")
left_figure.set_title("Bicubic", fontsize=40)
left_figure.imshow(crop_bicubic_hr)
right_figure = plt.subplot(1,2,2)
right_figure.set_title("Original",fontsize=40)
right_figure.axis("off")
right_figure.imshow(crop_hr)
#plt.savefig("/content/drive/MyDrive/model/bicubic_letter.png")

from tensorflow.python.keras import backend as lalala
from tensorflow.image import ssim
def PSNR(y_true, y_pred):
    return tf.image.psnr(y_true, y_pred, max_val=1.0)

    
def ssim(y_true, y_pred):
    return tf.image.ssim(y_true, y_pred, max_val=1.0)

psnr_ob = {
    'PSNR': PSNR,
    'ssim' : ssim
}

"""**여기 바꿔주세요!!!**"""

import tensorflow as tf
import os


srcnn = tf.keras.models.load_model('/content/drive/MyDrive/model/srcnn_50.h5', custom_objects=psnr_ob)
vdsr = tf.keras.models.load_model('/content/drive/MyDrive/model/vdsr_50.h5', custom_objects=psnr_ob)
kshsr1 = tf.keras.models.load_model('/content/drive/MyDrive/model/KSHSR1_50.h5', custom_objects=psnr_ob)
kshsr2 = tf.keras.models.load_model('/content/drive/MyDrive/model/KSHSR2_50.h5', custom_objects=psnr_ob)

def apply_srcnn(image):
    sr = srcnn.predict(image[np.newaxis, ...]/255.)
    sr[sr > 1] = 1
    sr[sr < 0] = 0
    sr *= 255.
    return np.array(sr[0].astype(np.uint8))

def apply_vdsr(image):
    sr = vdsr.predict(image[np.newaxis, ...]/255.)
    sr[sr > 1] = 1
    sr[sr < 0] = 0
    sr *= 255.
    return np.array(sr[0].astype(np.uint8))
        
def apply_kshsr1(image):
    sr = kshsr1.predict(image[np.newaxis, ...]/255.)
    sr[sr > 1] = 1
    sr[sr < 0] = 0
    sr *= 255.
    return np.array(sr[0].astype(np.uint8))
def apply_kshsr2(image):
    sr = kshsr2.predict(image[np.newaxis, ...]/255.)
    sr[sr > 1] = 1
    sr[sr < 0] = 0
    sr *= 255.
    return np.array(sr[0].astype(np.uint8))        
        
srcnn_hr = apply_srcnn(bicubic_hr)
vdsr_hr = apply_vdsr(bicubic_hr)
ksh_hr1 = apply_kshsr1(bicubic_hr)
ksh_hr2 = apply_kshsr2(bicubic_hr)

import matplotlib.gridspec as gridspec
gs1 = gridspec.GridSpec(3, 2)
gs1.update(wspace=0.0, hspace=0)
#left_tops = [(600,1100), (400,400), (0,1000)]
#left_tops = [(30,30)]
left_tops = [(0,0)]
#left_tops = [(90,210)]
images = []
 
i1 = hr.shape[0]
j1 = hr.shape[1]
for left_top in left_tops:
    img1 = img_crop(bicubic_hr, left_top, i1, j1)
    img2 = img_crop(srcnn_hr, left_top, i1, j1)
    img3 = img_crop(vdsr_hr, left_top, i1, j1)
    img4 = img_crop(ksh_hr1, left_top, i1, j1)
    img5 = img_crop(ksh_hr2, left_top, i1, j1)
    img6 = img_crop(hr, left_top, i1, j1)
    images.extend([img6, img1, img2, img3, img4, img5])
labels = ["Original","Bicubic", "SRCNN", "VDSR", "KSHSR1", "KSHSR2"] * 3 
images.extend([img1, img2, img3, img4, img5, img6])
#images.extend([bicubic_hr, srcnn_hr, vdsr_hr, ksh_hr1, ksh_hr2, hr])
plt.figure(figsize=(14,14))
for i in range(2*3):
    plt.axis("off")
    plt.subplot(3,2,i+1)
    plt.subplots_adjust(wspace=0.1, hspace=0.15)
    plt.imshow(images[i])
    plt.title(labels[i], fontsize=30)
plt.axis("off")
plt.savefig("/content/drive/MyDrive/model/compare1.png")
plt.show()